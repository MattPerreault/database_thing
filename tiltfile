# Welcome to Tilt!
#   More info: https://docs.tilt.dev/api.html#api.warn
print("""
-----------------------------------------------------------------
✨ Hello Tilt! This appears in the (Tiltfile) pane whenever Tilt
   evaluates this file.
-----------------------------------------------------------------
""".strip())
warn('ℹ️ Open {tiltfile_path} in your favorite editor to get started.'.format(
    tiltfile_path=config.main_path))

# Build Docker image

# docker_build('py_app', '.', dockerfile='Dockerfiles/Dockerfile.py_app',  match_in_env_vars=True,extra_tag=["py_app:local"])
docker_build('psql_db', '.', dockerfile='Dockerfiles/Dockerfile.psql_db')
docker_build('datagen', '.', dockerfile='Dockerfiles/Dockerfile.datagen')
docker_build('dbz_connect', '.', dockerfile='Dockerfiles/Dockerfile.debezium')
docker_build('py_ex', '.', dockerfile='Dockerfiles/Dockerfile.gx',  match_in_env_vars=True,extra_tag=["gx:local"])
docker_build('py_deequ', '.', dockerfile='Dockerfiles/Dockerfile.deequ',  match_in_env_vars=True,extra_tag=["deequ:local"])
docker_build('go_loader', '.', dockerfile='Dockerfiles/Dockerfile.go_loader')


# Customize a Kubernetes resource
k8s_yaml(kustomize("./ops/dev-stack"))

k8s_resource('postgres-db', port_forwards=[5432], labels="psql_db")
# k8s_resource('py-app', port_forwards=[5002], labels="py_app",auto_init=False, trigger_mode=TRIGGER_MODE_MANUAL)
k8s_resource('go-loader', port_forwards=[8000], labels="go_loader")

# Install Minio Object storage
# https://github.com/minio/minio/tree/master/helm/minio

load('ext://namespace', 'namespace_create')
namespace_create('minio')
load('ext://helm_remote', 'helm_remote')
values = [
    "./ops/dev-stack/minio/values.yaml",
                # "server=[serviceAccount.create=false,serviceAccount.name=argo-workflows,service.type=NodePort,extraArgs=[--secure=false]]", "--debug=true"
            ]
helm_remote('minio', namespace='minio', repo_url='https://charts.min.io/', values=values)
# k8s_resource("redpanda-configuration", labels="redpanda",resource_deps=["redpanda"])
k8s_resource("minio", port_forwards=['9001'], labels="object", resource_deps=[])
# k8s_resource("redpanda-post-upgrade", labels="redpanda",resource_deps=["redpanda"],)
# k8s_resource("redpanda", labels="redpanda")

# Install Redpanda Kafka
# https://github.com/redpanda-data-blog/2022-redpanda-duckdb/blob/main/docker-compose.yml
# https://github.com/redpanda-data/helm-charts
load('ext://namespace', 'namespace_create')
namespace_create('redpanda')
load('ext://helm_remote', 'helm_remote')
values = [
    "./ops/dev-stack/redpanda/values.yaml",
                # "server=[serviceAccount.create=false,serviceAccount.name=argo-workflows,service.type=NodePort,extraArgs=[--secure=false]]", "--debug=true"
            ]
helm_remote('redpanda', namespace='redpanda', repo_url='https://charts.redpanda.com/', values=values)
k8s_resource("redpanda-configuration", labels="redpanda",resource_deps=["redpanda"])
k8s_resource("redpanda-console",port_forwards=['8080'], labels="redpanda",resource_deps=["redpanda"])
k8s_resource("redpanda-post-upgrade", labels="redpanda", resource_deps=["redpanda"],)
k8s_resource("redpanda", labels="redpanda")
k8s_resource("dbz-connect", port_forwards=[], labels="redpanda", resource_deps=["redpanda", "redpanda-console"])

# Install Argo Workflows
load('ext://namespace', 'namespace_create')
namespace_create('argo')
load('ext://helm_remote', 'helm_remote')
values = [
    "./ops/dev-stack/argo/values.yaml",
                # "server=[serviceAccount.create=false,serviceAccount.name=argo-workflows,service.type=NodePort,extraArgs=[--secure=false]]", "--debug=true"
            ]
helm_remote('argo-workflows', namespace='argo', repo_url='https://argoproj.github.io/argo-helm', values=values, version='0.22.9')
# k8s_resource("argo-workflows-workflow-controller", port_forwards=['2746'])
k8s_resource("argo-workflows-server", port_forwards=['2746'],  labels="argo")
k8s_resource("argo-workflows-workflow-controller", labels="argo")
k8s_resource("create-go-loader-user", labels="psql_db")

# Install Argo Events
load('ext://helm_remote', 'helm_remote')
values = [
    "./ops/dev-stack/argo-events/values.yaml",
                # "server=[serviceAccount.create=false,serviceAccount.name=argo-workflows,service.type=NodePort,extraArgs=[--secure=false]]", "--debug=true"
            ]
helm_remote('argo-events', namespace='argo', repo_url='https://argoproj.github.io/argo-helm', values=values)

# Install Argo Cluster Workflows
k8s_yaml(helm('./ops/dev-stack/argo/helm/workflows'))
k8s_resource('py-gx',  labels="argo_workflow", auto_init=False, trigger_mode=TRIGGER_MODE_MANUAL)
k8s_resource('py-deequ', labels="argo_workflow", auto_init=False, trigger_mode=TRIGGER_MODE_MANUAL)


# Run local commands
#   Local commands can be helpful for one-time tasks like installing
#   project prerequisites. They can also manage long-lived processes
#   for non-containerized services or dependencies.
#
#   More info: https://docs.tilt.dev/local_resource.html

# Generate Argo Bearer Token
# script = """\
# SECRET=$(kubectl get sa argo-workflows-server --namespace argo -o=jsonpath='{.secrets[0].name}')
# ARGO_TOKEN="Bearer $(kubectl get secret --namespace argo $SECRET -o=jsonpath='{.data.token}' | base64 --decode)"
# echo $ARGO_TOKEN > ./.argo-token.txt
# """
# local_resource("argo-token", script, resource_deps=["create-argo-server-token"],  labels="argo")
script = """\
CREATE_TOKEN="Bearer $(kubectl create token argo-workflows-server -n argo)"
echo $CREATE_TOKEN > ./.argo-token.txt
"""
local_resource("create-argo-server-token", script, resource_deps=["argo-workflows-server"],  labels="argo")

# k8s_resource("datagen", labels="datagen",resource_deps=["psql_db"])
# Extensions are open-source, pre-packaged functions that extend Tilt
#
#   More info: https://github.com/tilt-dev/tilt-extensions
#
secret_settings(disable_scrub=True)
load('ext://git_resource', 'git_checkout')